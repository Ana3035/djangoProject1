"""
Django对所有的数据库都提供了很好的支持,为这些数据库提供了统一的调用API,可以由不同的业务需求配置不同的数据库
开发流程:
    配置数据库
    定义模型类,注意一个模型类都在数据库对应一张数据表
    生成迁移文件
    执行迁移生成数据库
    使用模型类增删改查

ORM:对象关系映射
    任务:根据对象的类型生成表结果,根据对象列表的操作转换为SQL语句,将SQL语句查询的结果返回到Django里面,因此无论数据库是什么类型都可以转换,
    优点:极大减轻了开发人员的工作量,不需要面对一种操作因为数据库的变更而更改代码
"""

"""
定义模型:
    模型,属性,表,字段之间的关系:一个模型类在数据库中对应了一张表,在模型类中定义的属性,对应该模型对照表中的一个字段
    
    定义属性:
        概述:Django根据属性的类型来确定下面的信息:
            当前选择的数据库支持字段的类型
            渲染管理表单是使用的默认HTML空间
            在管理站点最低限度的验证
            
            Django回味表增加自动增长的主键列,每个模型只能有一个主键列,如果使用选项设置摸个属性为主键列之后,此时Django不会再生成默认的主键列
            
            属性命名的限制:
            不能是Python所保留的关键字,遵循标志符号规则
            由于Django的查询方式,不允许使用连续的下划线
        
        库:定义属性的时候,需要字段类型,字段类型被定义在Django.db.models.field目录下面,为了方便使用,被导入到Django.db.models里面
           使用方式:导入from django.db import models
                    通过models.Field创建字段类型的对象,赋值给属性
          
          逻辑删除:对于重要的数据都做的是逻辑删除,不做物理删除,实现的方法是定义isDelete属性,类型是booleanField,默认的值是false
          
          字段类型:
                AutoField:是一个根据实际id自动增长的intergerfield,通常是不指定,如果是不指定,那么一个主键字段将会自动添加到模型中
                charfield(max_length 数字)表示的是字符串,默认的表单样式是textinput
                TextField 表示的是大文本字段,一般是超过4000使用,默认的表单控件是textarea
                integerfield表示的是整数
                decimalfield(max_digits,decimal_places)表示的是小数,前面笔试的是位数总数,后面的是小数点后面的数字位数
                FloatField表示的是浮点数
                booleanField表示的逻辑数
                DataField表示的是日期 还有可以根据提示自己看
                fileField表示的是一个上传文件的字段
                imageField表示的是上传图片的字段
                
          字段选项:
                概述:就是小括号里面的部分
                
                null:如果是true那么Django就会将一个空值以null的形式存储到数据库中,默认值是false
                blanke:如果是true那么表示的就是允许这个字段是空白,默认值是false
                db_column表示的是字段的名称,如果没有指定,那么使用属性的名称
                db_index如果值是true,那么就会在表中为这个字段创建索引
                default表示的是默认值
                unique如果是true,那么这个字段在表中必须有一个唯一值
                
    关系
        分类:
            ForeignKey:表示的是一对多,表示的是将字段对应在多的端中
            ManyToManyField:表示的是多堆垛,将字段对应在两端中
            OneToOneField:表示的是一对一,将字段定义在任意的一段中
            
        用一访问多:比如想查询班级里面所有的学生
            格式:对象.模型类小写_set   grade.students_set.all()
        访问id:
            格式:对象.属性_id  实例:student.sgrade_id
            
        
"""

"""
创建模型类:

"""

"""
元选项:
    在模型类中定义meta类,用于设置元信息
    db_table=""  表示的是定义数据表名,推荐使用的是小写字母如果不写,
    ordering[] 对象的默认排列字段,获取对象的列表的时候使用中括号里面直接是id表示的是升序,前面加上-表示的是降序  
"""

"""
模型成员:
    类属性:就是类里面含有不同的属性,就是名称啊什么的,但是这些是自己定义的属性,还有隐藏的类属性object,表示的是manager类型的对想,作用是与数据库进行交互,当定义模型类是没有指定管理器的时候,那么Django会为模型创建一个名字是objects的管理器
        自定义管理器:stuObj=models.Manager()
        自定义管理器manager类:模型管理器是模型和数据库进行交互的接口,一个模型类可以ð多个模型管理器,但是没啥用
                            作用:向管理器类中添加额外的方法,修改管理器返回的原始查询集,因为原始的所有的返回了重写get_queryset()方法
    
    创建对象:表示的是想存数据比如说有一个学生的数据传递过来,想存到数据库中,此时要创建一个学生对象再能存到数据库中,当创建对象的时候Django不会对数据库进行读写的操作,当调用save的方法的时候,才会和数据库交互.注意__init__方法已经在父类中使用,在自定义的模型中无法使用,
      方法:在模型类中添加一个方法;在自定义管理器中添加一个方法
        第一种:
"""

"""
模型查询:
    概述:查询集表示的是从数据库中获取的数据,就是学生对象的集合
        查询集可以由多个过滤器,其实过滤器就是一个函数,基于所给的数据参数限制查询集结果
        从SQL的角度来说,查询集和select语句等价,过滤器就想where条件
    
    查询集:
        在管理器上调用过滤器的方法来返回查询集
        查询集经过过滤器筛选之后返回到新的查询集,所以可以写成链式调用
        惰性执行:表示的是创建查询集的时候不会带来任何数据的访问,直到调用数据的时候,才会访问数据
        直接访问数据的情况:
            迭代:序列化:与if何用
        返回查询集的方法称为过滤器:
            all;  返回所有所有数据
            filter(键=值)||filter(键=值).filter(键=值)  返回符合条件的数据
            exclude() 表示的是过滤掉符合条件的数据
            order_by()表示的是排序
            values()表示的是返回一个列表
        返回单个数据:
            get()表示的是返回一个满足条件的对象,如果没有找到符合条件的对象.模型类会引发模型类.DoesNotExist的异常;如果找到多个对象也会也会引发模型类.MultipleObjectReturned异常
            count()返回当前查询集中的对象个数
            first()返回查询集中的第一个对象
            last()最后一个
            exist()判断查询集中是否有数据,如果有,返回true
        限制查询集:
            查询集返回的是列表,可以使用下标的方法进行限制,等同于sql中的limit语句
        查询集的缓存:
            概述:每个查询集都包含了一个缓存,来最小化的对数据库访问
                在新建的查询集中,缓存首次是空,第一次对查询集求值,会发生数据缓存,Django会将查询出来的数据缓存,且返回查询结果,以后的查                询直接使用查询集来缓存,此时就是不是操作数据库
        字段查询:实现了SQL中的where语句,作为方法filter.exclude,get的参数
                语法:属性名称_比较运算符=值
                外键查询:属性名_id
                转义:like语句使用%是为了占位,表示一个特殊字符,想要匹配字符中的%(where like '\%')
        比较运算符:exact表示判断,且大小写敏感 filt(isDelete=False)
                 contains,表示是否包含,大小写也敏感
                 startswith,endswith  表示的是以value开头或者结尾,大小写敏感
                 上面四个在前面加上i表示的就是不区分大小写
                 isnull,isnotnull分别表示的是是否时是空
                 in表示的是是否包含在范围内
                 gt gte it ite  大于 大于等于 小于 小于等于
                 year month day hour week_day minute second
                 跨关联查询:处理的是join查询  语法:模型类名__属性名__比较运算符
                 查询快捷:pk代表的是主键
        聚合函数:使用aggregate()函数返回聚合函数的值,但是其本身不是聚合函数
                avg count max min sum
        F对象:可以使用模型的A属性以及B属性来进行比较,就是一条数据里面两个值进行比较
        Q对象:过滤器方法中的关键参数,条件是and模式,但是想要实现or的关系的时候,这时候就需要使用Q对象
"""